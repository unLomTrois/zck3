grammar ck3;

// namespace = "hello_world" // value field
// hello_world.1 = { // block field
//     title = hello_world.1.t // value field
//     desc = hello_world.1.desc // value field
//     option = { // block field
//         name = hello_world.1.a // value field
//         debug_log = "Hello, world!" // value field
//     }
// }

file: field_list EOF;

field_list:
    field*;

field:
    value_field
    | block_field
    | token_field
    ;

value_field:
    key "=" value;

block_field:
    key "=" block;

key:
    identifier 
    | date 
    | number
    ;

block:
    "{" field_list "}";

token_field:
    key "=" token_block;

token_block:
    "{" token_list "}";

token_list: // { 1, 2, 3}
    "{" token_list_item ("," token_list_item)* "}";

token_list_item:
    number
    | quoted_string
    ;

value:
    identifier
    | number
    | quoted_string
    | boolean
    ;

identifier:
    any_identifier_char+;

number:
    '-'? digit+ ('.' digit+)? '%'?; // 100, -5.5, 10%

fragment digit:
    [0-9];

quoted_string:
    '"' quoted_string_char* '"';

boolean:
    "yes" | "no";

date:
    digit digit? digit? digit? '.' digit digit? '.' digit digit?;

fragment quoted_string_char:
    ~["\r\n];

fragment any_identifier_char:
    [a-zA-Z0-9_];
